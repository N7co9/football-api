<?php

namespace Api;


use App\Controller\FavoriteController;
use App\Core\Container;
use App\Core\DependencyProvider;
use App\Core\FavoritesLogic\FavManipulator;
use App\Model\DTO\UserDTO;
use App\Model\SQL\SqlConnector;
use App\Model\UserEntityManager;
use App\Model\UserMapper;
use App\Model\UserRepository;
use PHPUnit\Framework\TestCase;

class FavoriteControllerTest extends TestCase
{
    public UserEntityManager $userEntityManager;
    public UserRepository $userRepository;
    public FavManipulator $manipulator;

    protected function setUp(): void
    {
        $containerBuilder = new Container();
        $dependencyProvider = new DependencyProvider();
        $dependencyProvider->provide($containerBuilder);

        $this->container = $containerBuilder;
        $this->construct = new FavoriteController($this->container);

        $this->userRepository = new UserRepository();
        $this->userEntityManager = new UserEntityManager(new UserMapper());
        $this->manipulator = new FavManipulator();

        $user = new UserDTO();
        $user->email = 'TEST@TEST.COM';
        $user->name = 'TEST';
        $user->passwort = 'Xyz12345*';
        $_SESSION['mail'] = $user->email;

        $this->userEntityManager->saveCredentials($user);
        $this->userEntityManager->addFav('3', $this->userRepository->getUserID($_SESSION['mail']));
        $this->userEntityManager->addFav('4', $this->userRepository->getUserID($_SESSION['mail']));

        $this->userEntityManager = $containerBuilder->get(UserEntityManager::class);

        parent::setUp();
    }

    public function testDataConstruct(): void
    {
        $_GET['action'] = 'add';
        $output = $this->construct->dataConstruct();

        self::assertSame('favorites.twig', $output->getTpl());
        self::assertSame('TEST@TEST.COM', $output->getParameters()['user']);
        self::assertSame('valid', $this->construct->actionMap);
    }

    public function testDataConstructInvalid(): void
    {
        $_SESSION['mail'] = '';
        $this->construct->dataConstruct();

        self::assertSame('invalid-action', $this->construct->actionMap);
    }

    public function testRemoveFavoriteTeam(): void
    {
        $this->construct->removeFavoriteTeam('remove', '3', $this->userRepository->getUserID($_SESSION['mail']));

        self::assertSame([0 => '4'], $this->userRepository->getFavIDs($this->userRepository->getUserID($_SESSION['mail'])));
    }

    public function testMoveFavoriteTeamDown(): void
    {
        $this->construct->moveFavoriteTeamDown('down', '3', $this->userRepository->getUserID($_SESSION['mail']));

        self::assertSame([0 => '4', 1 => '3'], $this->userRepository->getFavIDs($this->userRepository->getUserID($_SESSION['mail'])));
    }

    public function testMoveFavoriteTeamUp(): void
    {
        $this->construct->moveFavoriteTeamUp('up', '4', $this->userRepository->getUserID($_SESSION['mail']));

        self::assertSame([0 => '4', 1 => '3'], $this->userRepository->getFavIDs($this->userRepository->getUserID($_SESSION['mail'])));

    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM user_favorites;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}